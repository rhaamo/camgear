"""Initial migration

Revision ID: 3676351f2e38
Revises: None
Create Date: 2018-11-30 09:12:53.041314

"""

# revision identifiers, used by Alembic.
revision = "3676351f2e38"
down_revision = None

from alembic import op  # noqa: E402
import sqlalchemy as sa  # noqa: E402
import sqlalchemy_utils  # noqa: E402


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "config",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("app_name", sa.String(length=255), nullable=True),
        sa.Column("app_description", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "role",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("password", sa.String(length=255), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column("confirmed_at", sa.DateTime(), nullable=True),
        sa.Column("display_name", sa.String(length=30), nullable=True),
        sa.Column("locale", sa.String(length=5), nullable=True),
        sa.Column("timezone", sa.String(length=255), nullable=False),
        sa.Column("slug", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("name"),
        sa.UniqueConstraint("slug"),
    )
    op.create_table(
        "accessory",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("state", sa.Integer(), nullable=False),
        sa.Column("state_notes", sa.String(length=255), nullable=True),
        sa.Column("manufacturer", sa.String(length=255), nullable=True),
        sa.Column("model", sa.String(length=255), nullable=True),
        sa.Column("model_notes", sa.Text(), nullable=True),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.Column("serial", sa.String(length=255), nullable=True),
        sa.Column("mount", sa.String(length=255), nullable=True),
        sa.Column("url1", sqlalchemy_utils.types.url.URLType(), nullable=True),
        sa.Column("url2", sqlalchemy_utils.types.url.URLType(), nullable=True),
        sa.Column("url3", sqlalchemy_utils.types.url.URLType(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "camera",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("state", sa.Integer(), nullable=False),
        sa.Column("state_notes", sa.String(length=255), nullable=True),
        sa.Column("manufacturer", sa.String(length=255), nullable=True),
        sa.Column("model", sa.String(length=255), nullable=True),
        sa.Column("model_notes", sa.Text(), nullable=True),
        sa.Column("serial", sa.String(length=255), nullable=True),
        sa.Column("mount", sa.String(length=255), nullable=True),
        sa.Column("camera_type", sa.Integer(), nullable=False),
        sa.Column("film_type", sa.Integer(), nullable=False),
        sa.Column("auto_expo", sa.Boolean(), nullable=True),
        sa.Column("auto_focus", sa.Boolean(), nullable=True),
        sa.Column("batteries", sa.String(length=255), nullable=True),
        sa.Column("hot_shoe", sa.Boolean(), nullable=True),
        sa.Column("fixed_lense", sa.Boolean(), nullable=True),
        sa.Column("iso_min", sa.Integer(), nullable=True),
        sa.Column("iso_max", sa.Integer(), nullable=True),
        sa.Column("focale", sa.Integer(), nullable=False),
        sa.Column("min_aperture", sa.Float(), nullable=True),
        sa.Column("max_aperture", sa.Float(), nullable=True),
        sa.Column("blades", sa.Boolean(), nullable=True),
        sa.Column("filter_diameter", sa.Integer(), nullable=False),
        sa.Column("weight", sa.Integer(), nullable=True),
        sa.Column("length", sa.Integer(), nullable=True),
        sa.Column("focus", sa.Integer(), nullable=False),
        sa.Column("focus_length", sa.Integer(), nullable=False),
        sa.Column("macro", sa.Boolean(), nullable=True),
        sa.Column("macro_length", sa.Integer(), nullable=False),
        sa.Column("url1", sqlalchemy_utils.types.url.URLType(), nullable=True),
        sa.Column("url2", sqlalchemy_utils.types.url.URLType(), nullable=True),
        sa.Column("url3", sqlalchemy_utils.types.url.URLType(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "lense",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("state", sa.Integer(), nullable=False),
        sa.Column("state_notes", sa.String(length=255), nullable=True),
        sa.Column("manufacturer", sa.String(length=255), nullable=True),
        sa.Column("model", sa.String(length=255), nullable=True),
        sa.Column("model_notes", sa.Text(), nullable=True),
        sa.Column("serial", sa.String(length=255), nullable=True),
        sa.Column("mount", sa.String(length=255), nullable=True),
        sa.Column("focale", sa.Integer(), nullable=False),
        sa.Column("min_aperture", sa.Float(), nullable=True),
        sa.Column("max_aperture", sa.Float(), nullable=True),
        sa.Column("lense_type", sa.Integer(), nullable=False),
        sa.Column("macro", sa.Boolean(), nullable=True),
        sa.Column("macro_length", sa.Integer(), nullable=False),
        sa.Column("filter_diameter", sa.Integer(), nullable=False),
        sa.Column("blades", sa.Boolean(), nullable=True),
        sa.Column("angle", sa.Float(), nullable=True),
        sa.Column("focus", sa.Integer(), nullable=False),
        sa.Column("focus_length", sa.Integer(), nullable=False),
        sa.Column("weight", sa.Integer(), nullable=False),
        sa.Column("length", sa.Integer(), nullable=False),
        sa.Column("url1", sqlalchemy_utils.types.url.URLType(), nullable=True),
        sa.Column("url2", sqlalchemy_utils.types.url.URLType(), nullable=True),
        sa.Column("url3", sqlalchemy_utils.types.url.URLType(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "logging",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("category", sa.String(length=255), nullable=False),
        sa.Column("level", sa.String(length=255), nullable=False),
        sa.Column("message", sa.Text(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "roles_users",
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("role_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["role_id"], ["role.id"]),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"]),
    )
    op.create_table(
        "user_logging",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("category", sa.String(length=255), nullable=False),
        sa.Column("level", sa.String(length=255), nullable=False),
        sa.Column("message", sa.Text(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=True),
        sa.Column("item_id", sa.Integer(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_logging")
    op.drop_table("roles_users")
    op.drop_table("logging")
    op.drop_table("lense")
    op.drop_table("camera")
    op.drop_table("accessory")
    op.drop_table("user")
    op.drop_table("role")
    op.drop_table("config")
    # ### end Alembic commands ###
